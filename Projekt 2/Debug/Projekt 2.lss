
Projekt 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  000004f8  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080021e  0080021e  000005aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d88  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ea  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ea  00000000  00000000  0000367e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00003d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a2a  00000000  00000000  00003f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c4  00000000  00000000  0000495a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004f1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ef       	ldi	r30, 0xF8	; 248
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 31       	cpi	r26, 0x1E	; 30
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e1       	ldi	r26, 0x1E	; 30
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 31       	cpi	r26, 0x1F	; 31
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4e d0       	rcall	.+156    	; 0x1bc <main>
 120:	e9 c1       	rjmp	.+978    	; 0x4f4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_ZN19Jordfugtighedsensor11GetHumidityEv>:
	ADC_init(); // Call ADC_init() here
}
	
int Jordfugtighedsensor::GetHumidity(){
	return humidity;
}
 124:	fc 01       	movw	r30, r24
 126:	80 81       	ld	r24, Z
 128:	91 81       	ldd	r25, Z+1	; 0x01
 12a:	08 95       	ret

0000012c <_ZN19Jordfugtighedsensor12GetThresholdEv>:
int Jordfugtighedsensor::GetThreshold(){
	return threshold;
}
 12c:	fc 01       	movw	r30, r24
 12e:	82 81       	ldd	r24, Z+2	; 0x02
 130:	93 81       	ldd	r25, Z+3	; 0x03
 132:	08 95       	ret

00000134 <_ZN19Jordfugtighedsensor12SetThresholdEi>:
void Jordfugtighedsensor::SetHumidity(){ // Anderledes fra klassediagram, tror klassediagram har en lille fejl her
	humidity = ADC_readAsPercentage();
}

void Jordfugtighedsensor::SetThreshold(int NytTreshold){
	threshold = NytTreshold;
 134:	fc 01       	movw	r30, r24
 136:	73 83       	std	Z+3, r23	; 0x03
 138:	62 83       	std	Z+2, r22	; 0x02
 13a:	08 95       	ret

0000013c <_ZN19Jordfugtighedsensor8ADC_initEv>:
}

void Jordfugtighedsensor::ADC_init() {
	ADMUX = (1 << REFS0);  // Sætter reference til AVcc (5V)
 13c:	80 e4       	ldi	r24, 0x40	; 64
 13e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Aktiverer ADC og sætter prescaler
 142:	87 e8       	ldi	r24, 0x87	; 135
 144:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 148:	08 95       	ret

0000014a <_ZN19JordfugtighedsensorC1Eii>:
#include "Jordfugtighedsensor.h"

Jordfugtighedsensor::Jordfugtighedsensor(int NytThreshold, int pin)
: humidity(0), threshold(NytThreshold), adcPin(pin) {
 14a:	fc 01       	movw	r30, r24
 14c:	11 82       	std	Z+1, r1	; 0x01
 14e:	10 82       	st	Z, r1
 150:	73 83       	std	Z+3, r23	; 0x03
 152:	62 83       	std	Z+2, r22	; 0x02
 154:	55 83       	std	Z+5, r21	; 0x05
 156:	44 83       	std	Z+4, r20	; 0x04
	ADC_init(); // Call ADC_init() here
 158:	f1 cf       	rjmp	.-30     	; 0x13c <_ZN19Jordfugtighedsensor8ADC_initEv>
 15a:	08 95       	ret

0000015c <_ZN19Jordfugtighedsensor20ADC_readAsPercentageEv>:
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Aktiverer ADC og sætter prescaler
}
	
double Jordfugtighedsensor::ADC_readAsPercentage(){  // Retunere Humidity som procent
	
	ADMUX = (ADMUX & 0xF0) | (adcPin & 0x0F);
 15c:	ec e7       	ldi	r30, 0x7C	; 124
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	20 81       	ld	r18, Z
 162:	dc 01       	movw	r26, r24
 164:	14 96       	adiw	r26, 0x04	; 4
 166:	8c 91       	ld	r24, X
 168:	20 7f       	andi	r18, 0xF0	; 240
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	82 2b       	or	r24, r18
 16e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Starter konvertering
 170:	ea e7       	ldi	r30, 0x7A	; 122
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	80 64       	ori	r24, 0x40	; 64
 178:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));  // Venter på, at konvertering er færdig
 17a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 17e:	86 fd       	sbrc	r24, 6
 180:	fc cf       	rjmp	.-8      	; 0x17a <_ZN19Jordfugtighedsensor20ADC_readAsPercentageEv+0x1e>
	
	double moisturePercentage = ((1023 - ADC) * 100) / (1023 - 300); // ADC registeret indeholder værdien for det digitale signal 
 182:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 186:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 18a:	4c e9       	ldi	r20, 0x9C	; 156
 18c:	42 03       	mulsu	r20, r18
 18e:	c0 01       	movw	r24, r0
 190:	43 9f       	mul	r20, r19
 192:	90 0d       	add	r25, r0
 194:	11 24       	eor	r1, r1
 196:	84 56       	subi	r24, 0x64	; 100
 198:	90 47       	sbci	r25, 0x70	; 112
 19a:	63 ed       	ldi	r22, 0xD3	; 211
 19c:	72 e0       	ldi	r23, 0x02	; 2
 19e:	63 d1       	rcall	.+710    	; 0x466 <__udivmodhi4>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fa c0       	rjmp	.+500    	; 0x39a <__floatunsisf>
return moisturePercentage;
 1a6:	08 95       	ret

000001a8 <_ZN19Jordfugtighedsensor11SetHumidityEv>:
	return humidity;
}
int Jordfugtighedsensor::GetThreshold(){
	return threshold;
}
void Jordfugtighedsensor::SetHumidity(){ // Anderledes fra klassediagram, tror klassediagram har en lille fejl her
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
	humidity = ADC_readAsPercentage();
 1ae:	d6 df       	rcall	.-84     	; 0x15c <_ZN19Jordfugtighedsensor20ADC_readAsPercentageEv>
 1b0:	c3 d0       	rcall	.+390    	; 0x338 <__fixsfsi>
 1b2:	79 83       	std	Y+1, r23	; 0x01
 1b4:	68 83       	st	Y, r22
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <main>:
#include <util/delay.h>


UART uart;  // Create an instance of the UART class

int main(void) {
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	62 97       	sbiw	r28, 0x12	; 18
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	cd bf       	out	0x3d, r28	; 61
	// Initialize UART
	uart.init(MY_UBRR);
 1d0:	67 e6       	ldi	r22, 0x67	; 103
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	8e e1       	ldi	r24, 0x1E	; 30
 1d6:	92 e0       	ldi	r25, 0x02	; 2
 1d8:	6d d0       	rcall	.+218    	; 0x2b4 <_ZN4UART4initEj>

	// Create a Potteplante instance with an ID, Sensor Pin, Humidity Threshold, and Watering Duration
	Potteplante plant( 1, 0 , 20 , 5); 
 1da:	05 e0       	ldi	r16, 0x05	; 5
 1dc:	10 e0       	ldi	r17, 0x00	; 0
 1de:	24 e1       	ldi	r18, 0x14	; 20
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	45 d0       	rcall	.+138    	; 0x27a <_ZN11PotteplanteC1Eiiii>
	

	// Main loop
	while (1) {
		// Update the sensor (this will call SetHumidity in the sensor class)
		plant.UpdateSensor();
 1f0:	ce 01       	movw	r24, r28
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	5c d0       	rcall	.+184    	; 0x2ae <_ZN11Potteplante12UpdateSensorEv>

		// Send humidity value via UART
		uart.print("Humidity: ");
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	72 e0       	ldi	r23, 0x02	; 2
 1fa:	8e e1       	ldi	r24, 0x1E	; 30
 1fc:	92 e0       	ldi	r25, 0x02	; 2
		uart.printNumber(plant.GetHumidity());
 1fe:	6c d0       	rcall	.+216    	; 0x2d8 <_ZN4UART5printEPKc>
 200:	ce 01       	movw	r24, r28
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	4b d0       	rcall	.+150    	; 0x29c <_ZN11Potteplante11GetHumidityEv>
 206:	68 2f       	mov	r22, r24
 208:	8e e1       	ldi	r24, 0x1E	; 30
 20a:	92 e0       	ldi	r25, 0x02	; 2
		uart.print("\r\n");
 20c:	77 d0       	rcall	.+238    	; 0x2fc <_ZN4UART11printNumberEh>
 20e:	6b e0       	ldi	r22, 0x0B	; 11
 210:	72 e0       	ldi	r23, 0x02	; 2
 212:	8e e1       	ldi	r24, 0x1E	; 30
 214:	92 e0       	ldi	r25, 0x02	; 2

		// Send threshold value via UART
		uart.print("Threshold: ");
 216:	60 d0       	rcall	.+192    	; 0x2d8 <_ZN4UART5printEPKc>
 218:	62 e1       	ldi	r22, 0x12	; 18
 21a:	72 e0       	ldi	r23, 0x02	; 2
 21c:	8e e1       	ldi	r24, 0x1E	; 30
		uart.printNumber(plant.GetThreshold());
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	5b d0       	rcall	.+182    	; 0x2d8 <_ZN4UART5printEPKc>
 222:	ce 01       	movw	r24, r28
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	3d d0       	rcall	.+122    	; 0x2a2 <_ZN11Potteplante12GetThresholdEv>
 228:	68 2f       	mov	r22, r24
 22a:	8e e1       	ldi	r24, 0x1E	; 30
 22c:	92 e0       	ldi	r25, 0x02	; 2
		uart.print("\r\n");
 22e:	66 d0       	rcall	.+204    	; 0x2fc <_ZN4UART11printNumberEh>
 230:	6b e0       	ldi	r22, 0x0B	; 11
 232:	72 e0       	ldi	r23, 0x02	; 2
 234:	8e e1       	ldi	r24, 0x1E	; 30
 236:	92 e0       	ldi	r25, 0x02	; 2

		// Set a new threshold and print it
		plant.SetThreshold(50);
 238:	4f d0       	rcall	.+158    	; 0x2d8 <_ZN4UART5printEPKc>
 23a:	62 e3       	ldi	r22, 0x32	; 50
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
		uart.print("New Threshold: ");
 242:	32 d0       	rcall	.+100    	; 0x2a8 <_ZN11Potteplante12SetThresholdEi>
 244:	6e e0       	ldi	r22, 0x0E	; 14
 246:	72 e0       	ldi	r23, 0x02	; 2
 248:	8e e1       	ldi	r24, 0x1E	; 30
 24a:	92 e0       	ldi	r25, 0x02	; 2
		uart.printNumber(plant.GetThreshold());
 24c:	45 d0       	rcall	.+138    	; 0x2d8 <_ZN4UART5printEPKc>
 24e:	ce 01       	movw	r24, r28
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	27 d0       	rcall	.+78     	; 0x2a2 <_ZN11Potteplante12GetThresholdEv>
 254:	68 2f       	mov	r22, r24
 256:	8e e1       	ldi	r24, 0x1E	; 30
 258:	92 e0       	ldi	r25, 0x02	; 2
 25a:	50 d0       	rcall	.+160    	; 0x2fc <_ZN4UART11printNumberEh>
 25c:	6b e0       	ldi	r22, 0x0B	; 11
		uart.print("\r\n");
 25e:	72 e0       	ldi	r23, 0x02	; 2
 260:	8e e1       	ldi	r24, 0x1E	; 30
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	39 d0       	rcall	.+114    	; 0x2d8 <_ZN4UART5printEPKc>
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	83 ed       	ldi	r24, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	90 e3       	ldi	r25, 0x30	; 48
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0xb0>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0xba>
 276:	00 00       	nop
 278:	bb cf       	rjmp	.-138    	; 0x1f0 <main+0x34>

0000027a <_ZN11PotteplanteC1Eiiii>:
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
wateringDuration(WateringDuration),
jordfugtighedsensor(HumidityThreshold, HumiditySensorPin)  // Pass the pin here
{}

	
void Potteplante::WaterPlant(){
 27e:	fc 01       	movw	r30, r24
 280:	71 83       	std	Z+1, r23	; 0x01
 282:	60 83       	st	Z, r22
 284:	53 83       	std	Z+3, r21	; 0x03
 286:	42 83       	std	Z+2, r20	; 0x02
 288:	35 83       	std	Z+5, r19	; 0x05
 28a:	24 83       	std	Z+4, r18	; 0x04
 28c:	17 83       	std	Z+7, r17	; 0x07
 28e:	06 83       	std	Z+6, r16	; 0x06
 290:	b9 01       	movw	r22, r18
 292:	0c 96       	adiw	r24, 0x0c	; 12
 294:	5a df       	rcall	.-332    	; 0x14a <_ZN19JordfugtighedsensorC1Eii>
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <_ZN11Potteplante11GetHumidityEv>:
	// vandpumpe.PumpWater();
}

int Potteplante::GetHumidity(){
	return jordfugtighedsensor.GetHumidity();
 29c:	0c 96       	adiw	r24, 0x0c	; 12
 29e:	42 cf       	rjmp	.-380    	; 0x124 <_ZN19Jordfugtighedsensor11GetHumidityEv>
}
 2a0:	08 95       	ret

000002a2 <_ZN11Potteplante12GetThresholdEv>:


int Potteplante::GetThreshold(){
	return jordfugtighedsensor.GetThreshold();
 2a2:	0c 96       	adiw	r24, 0x0c	; 12
 2a4:	43 cf       	rjmp	.-378    	; 0x12c <_ZN19Jordfugtighedsensor12GetThresholdEv>
}
 2a6:	08 95       	ret

000002a8 <_ZN11Potteplante12SetThresholdEi>:

void Potteplante::SetThreshold(int NyHumidityTreshold){
	jordfugtighedsensor.SetThreshold(NyHumidityTreshold);
 2a8:	0c 96       	adiw	r24, 0x0c	; 12
 2aa:	44 cf       	rjmp	.-376    	; 0x134 <_ZN19Jordfugtighedsensor12SetThresholdEi>
 2ac:	08 95       	ret

000002ae <_ZN11Potteplante12UpdateSensorEv>:
}

void Potteplante::UpdateSensor(){
	jordfugtighedsensor.SetHumidity();
 2ae:	0c 96       	adiw	r24, 0x0c	; 12
 2b0:	7b cf       	rjmp	.-266    	; 0x1a8 <_ZN19Jordfugtighedsensor11SetHumidityEv>
 2b2:	08 95       	ret

000002b4 <_ZN4UART4initEj>:
#include "UART.h"
#include <stdlib.h>  // Inkluderer stdlib.h for itoa funktion

// Initialiserer UART ved hjælp af den angivne UBRR værdi
void UART::init(uint16_t ubrr) {
	UBRR0H = (ubrr >> 8);      // Sætter den høje byte af UBRR
 2b4:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = ubrr;             // Sætter den lave byte af UBRR
 2b8:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B = (1 << TXEN0);     // Aktiverer transmitter
 2bc:	88 e0       	ldi	r24, 0x08	; 8
 2be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Sætter 8 data bits og 1 stop bit
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 2c8:	08 95       	ret

000002ca <_ZN4UART8transmitEc>:
}

void UART::transmit(char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Venter på, at transmit-bufferen er klar
 2ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 2ce:	85 ff       	sbrs	r24, 5
 2d0:	fc cf       	rjmp	.-8      	; 0x2ca <_ZN4UART8transmitEc>
	UDR0 = data;                       // Skriver data til transmit-bufferen
 2d2:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 2d6:	08 95       	ret

000002d8 <_ZN4UART5printEPKc>:
}

void UART::print(const char* str) {
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	8c 01       	movw	r16, r24
 2e2:	eb 01       	movw	r28, r22
	while (*str) {
 2e4:	68 81       	ld	r22, Y
 2e6:	66 23       	and	r22, r22
 2e8:	21 f0       	breq	.+8      	; 0x2f2 <_ZN4UART5printEPKc+0x1a>
		transmit(*str++);
 2ea:	21 96       	adiw	r28, 0x01	; 1
 2ec:	c8 01       	movw	r24, r16
 2ee:	ed df       	rcall	.-38     	; 0x2ca <_ZN4UART8transmitEc>
	while (!(UCSR0A & (1 << UDRE0)));  // Venter på, at transmit-bufferen er klar
	UDR0 = data;                       // Skriver data til transmit-bufferen
}

void UART::print(const char* str) {
	while (*str) {
 2f0:	f9 cf       	rjmp	.-14     	; 0x2e4 <_ZN4UART5printEPKc+0xc>
		transmit(*str++);
	}
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	08 95       	ret

000002fc <_ZN4UART11printNumberEh>:

void UART::printNumber(uint8_t number) {
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 d0       	rcall	.+0      	; 0x306 <_ZN4UART11printNumberEh+0xa>
 306:	1f 92       	push	r1
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
 30c:	8c 01       	movw	r16, r24
 30e:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 310:	4a e0       	ldi	r20, 0x0A	; 10
 312:	be 01       	movw	r22, r28
 314:	6f 5f       	subi	r22, 0xFF	; 255
 316:	7f 4f       	sbci	r23, 0xFF	; 255
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	b9 d0       	rcall	.+370    	; 0x48e <__itoa_ncheck>
	char buffer[4];
	itoa(number, buffer, 10);  // Konverterer tallet til tekst (decimal-basis)
	print(buffer);             // Sender tallet som tekst
 31c:	be 01       	movw	r22, r28
 31e:	6f 5f       	subi	r22, 0xFF	; 255
 320:	7f 4f       	sbci	r23, 0xFF	; 255
 322:	c8 01       	movw	r24, r16
 324:	d9 df       	rcall	.-78     	; 0x2d8 <_ZN4UART5printEPKc>
}
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	08 95       	ret

00000338 <__fixsfsi>:
 338:	04 d0       	rcall	.+8      	; 0x342 <__fixunssfsi>
 33a:	68 94       	set
 33c:	b1 11       	cpse	r27, r1
 33e:	8d c0       	rjmp	.+282    	; 0x45a <__fp_szero>
 340:	08 95       	ret

00000342 <__fixunssfsi>:
 342:	70 d0       	rcall	.+224    	; 0x424 <__fp_splitA>
 344:	88 f0       	brcs	.+34     	; 0x368 <__fixunssfsi+0x26>
 346:	9f 57       	subi	r25, 0x7F	; 127
 348:	90 f0       	brcs	.+36     	; 0x36e <__fixunssfsi+0x2c>
 34a:	b9 2f       	mov	r27, r25
 34c:	99 27       	eor	r25, r25
 34e:	b7 51       	subi	r27, 0x17	; 23
 350:	a0 f0       	brcs	.+40     	; 0x37a <__fixunssfsi+0x38>
 352:	d1 f0       	breq	.+52     	; 0x388 <__fixunssfsi+0x46>
 354:	66 0f       	add	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	88 1f       	adc	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	1a f0       	brmi	.+6      	; 0x364 <__fixunssfsi+0x22>
 35e:	ba 95       	dec	r27
 360:	c9 f7       	brne	.-14     	; 0x354 <__fixunssfsi+0x12>
 362:	12 c0       	rjmp	.+36     	; 0x388 <__fixunssfsi+0x46>
 364:	b1 30       	cpi	r27, 0x01	; 1
 366:	81 f0       	breq	.+32     	; 0x388 <__fixunssfsi+0x46>
 368:	77 d0       	rcall	.+238    	; 0x458 <__fp_zero>
 36a:	b1 e0       	ldi	r27, 0x01	; 1
 36c:	08 95       	ret
 36e:	74 c0       	rjmp	.+232    	; 0x458 <__fp_zero>
 370:	67 2f       	mov	r22, r23
 372:	78 2f       	mov	r23, r24
 374:	88 27       	eor	r24, r24
 376:	b8 5f       	subi	r27, 0xF8	; 248
 378:	39 f0       	breq	.+14     	; 0x388 <__fixunssfsi+0x46>
 37a:	b9 3f       	cpi	r27, 0xF9	; 249
 37c:	cc f3       	brlt	.-14     	; 0x370 <__fixunssfsi+0x2e>
 37e:	86 95       	lsr	r24
 380:	77 95       	ror	r23
 382:	67 95       	ror	r22
 384:	b3 95       	inc	r27
 386:	d9 f7       	brne	.-10     	; 0x37e <__fixunssfsi+0x3c>
 388:	3e f4       	brtc	.+14     	; 0x398 <__fixunssfsi+0x56>
 38a:	90 95       	com	r25
 38c:	80 95       	com	r24
 38e:	70 95       	com	r23
 390:	61 95       	neg	r22
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	8f 4f       	sbci	r24, 0xFF	; 255
 396:	9f 4f       	sbci	r25, 0xFF	; 255
 398:	08 95       	ret

0000039a <__floatunsisf>:
 39a:	e8 94       	clt
 39c:	09 c0       	rjmp	.+18     	; 0x3b0 <__floatsisf+0x12>

0000039e <__floatsisf>:
 39e:	97 fb       	bst	r25, 7
 3a0:	3e f4       	brtc	.+14     	; 0x3b0 <__floatsisf+0x12>
 3a2:	90 95       	com	r25
 3a4:	80 95       	com	r24
 3a6:	70 95       	com	r23
 3a8:	61 95       	neg	r22
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	99 23       	and	r25, r25
 3b2:	a9 f0       	breq	.+42     	; 0x3de <__floatsisf+0x40>
 3b4:	f9 2f       	mov	r31, r25
 3b6:	96 e9       	ldi	r25, 0x96	; 150
 3b8:	bb 27       	eor	r27, r27
 3ba:	93 95       	inc	r25
 3bc:	f6 95       	lsr	r31
 3be:	87 95       	ror	r24
 3c0:	77 95       	ror	r23
 3c2:	67 95       	ror	r22
 3c4:	b7 95       	ror	r27
 3c6:	f1 11       	cpse	r31, r1
 3c8:	f8 cf       	rjmp	.-16     	; 0x3ba <__floatsisf+0x1c>
 3ca:	fa f4       	brpl	.+62     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3cc:	bb 0f       	add	r27, r27
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <__floatsisf+0x36>
 3d0:	60 ff       	sbrs	r22, 0
 3d2:	1b c0       	rjmp	.+54     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	8f 4f       	sbci	r24, 0xFF	; 255
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	16 c0       	rjmp	.+44     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3de:	88 23       	and	r24, r24
 3e0:	11 f0       	breq	.+4      	; 0x3e6 <__floatsisf+0x48>
 3e2:	96 e9       	ldi	r25, 0x96	; 150
 3e4:	11 c0       	rjmp	.+34     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e6:	77 23       	and	r23, r23
 3e8:	21 f0       	breq	.+8      	; 0x3f2 <__floatsisf+0x54>
 3ea:	9e e8       	ldi	r25, 0x8E	; 142
 3ec:	87 2f       	mov	r24, r23
 3ee:	76 2f       	mov	r23, r22
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <__floatsisf+0x5e>
 3f2:	66 23       	and	r22, r22
 3f4:	71 f0       	breq	.+28     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3f6:	96 e8       	ldi	r25, 0x86	; 134
 3f8:	86 2f       	mov	r24, r22
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	2a f0       	brmi	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 400:	9a 95       	dec	r25
 402:	66 0f       	add	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	88 1f       	adc	r24, r24
 408:	da f7       	brpl	.-10     	; 0x400 <__LOCK_REGION_LENGTH__>
 40a:	88 0f       	add	r24, r24
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	97 f9       	bld	r25, 7
 412:	08 95       	ret

00000414 <__fp_split3>:
 414:	57 fd       	sbrc	r21, 7
 416:	90 58       	subi	r25, 0x80	; 128
 418:	44 0f       	add	r20, r20
 41a:	55 1f       	adc	r21, r21
 41c:	59 f0       	breq	.+22     	; 0x434 <__fp_splitA+0x10>
 41e:	5f 3f       	cpi	r21, 0xFF	; 255
 420:	71 f0       	breq	.+28     	; 0x43e <__fp_splitA+0x1a>
 422:	47 95       	ror	r20

00000424 <__fp_splitA>:
 424:	88 0f       	add	r24, r24
 426:	97 fb       	bst	r25, 7
 428:	99 1f       	adc	r25, r25
 42a:	61 f0       	breq	.+24     	; 0x444 <__fp_splitA+0x20>
 42c:	9f 3f       	cpi	r25, 0xFF	; 255
 42e:	79 f0       	breq	.+30     	; 0x44e <__fp_splitA+0x2a>
 430:	87 95       	ror	r24
 432:	08 95       	ret
 434:	12 16       	cp	r1, r18
 436:	13 06       	cpc	r1, r19
 438:	14 06       	cpc	r1, r20
 43a:	55 1f       	adc	r21, r21
 43c:	f2 cf       	rjmp	.-28     	; 0x422 <__fp_split3+0xe>
 43e:	46 95       	lsr	r20
 440:	f1 df       	rcall	.-30     	; 0x424 <__fp_splitA>
 442:	08 c0       	rjmp	.+16     	; 0x454 <__fp_splitA+0x30>
 444:	16 16       	cp	r1, r22
 446:	17 06       	cpc	r1, r23
 448:	18 06       	cpc	r1, r24
 44a:	99 1f       	adc	r25, r25
 44c:	f1 cf       	rjmp	.-30     	; 0x430 <__fp_splitA+0xc>
 44e:	86 95       	lsr	r24
 450:	71 05       	cpc	r23, r1
 452:	61 05       	cpc	r22, r1
 454:	08 94       	sec
 456:	08 95       	ret

00000458 <__fp_zero>:
 458:	e8 94       	clt

0000045a <__fp_szero>:
 45a:	bb 27       	eor	r27, r27
 45c:	66 27       	eor	r22, r22
 45e:	77 27       	eor	r23, r23
 460:	cb 01       	movw	r24, r22
 462:	97 f9       	bld	r25, 7
 464:	08 95       	ret

00000466 <__udivmodhi4>:
 466:	aa 1b       	sub	r26, r26
 468:	bb 1b       	sub	r27, r27
 46a:	51 e1       	ldi	r21, 0x11	; 17
 46c:	07 c0       	rjmp	.+14     	; 0x47c <__udivmodhi4_ep>

0000046e <__udivmodhi4_loop>:
 46e:	aa 1f       	adc	r26, r26
 470:	bb 1f       	adc	r27, r27
 472:	a6 17       	cp	r26, r22
 474:	b7 07       	cpc	r27, r23
 476:	10 f0       	brcs	.+4      	; 0x47c <__udivmodhi4_ep>
 478:	a6 1b       	sub	r26, r22
 47a:	b7 0b       	sbc	r27, r23

0000047c <__udivmodhi4_ep>:
 47c:	88 1f       	adc	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	5a 95       	dec	r21
 482:	a9 f7       	brne	.-22     	; 0x46e <__udivmodhi4_loop>
 484:	80 95       	com	r24
 486:	90 95       	com	r25
 488:	bc 01       	movw	r22, r24
 48a:	cd 01       	movw	r24, r26
 48c:	08 95       	ret

0000048e <__itoa_ncheck>:
 48e:	bb 27       	eor	r27, r27
 490:	4a 30       	cpi	r20, 0x0A	; 10
 492:	31 f4       	brne	.+12     	; 0x4a0 <__itoa_ncheck+0x12>
 494:	99 23       	and	r25, r25
 496:	22 f4       	brpl	.+8      	; 0x4a0 <__itoa_ncheck+0x12>
 498:	bd e2       	ldi	r27, 0x2D	; 45
 49a:	90 95       	com	r25
 49c:	81 95       	neg	r24
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <__utoa_common>

000004a2 <__utoa_ncheck>:
 4a2:	bb 27       	eor	r27, r27

000004a4 <__utoa_common>:
 4a4:	fb 01       	movw	r30, r22
 4a6:	55 27       	eor	r21, r21
 4a8:	aa 27       	eor	r26, r26
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	aa 1f       	adc	r26, r26
 4b0:	a4 17       	cp	r26, r20
 4b2:	10 f0       	brcs	.+4      	; 0x4b8 <__utoa_common+0x14>
 4b4:	a4 1b       	sub	r26, r20
 4b6:	83 95       	inc	r24
 4b8:	50 51       	subi	r21, 0x10	; 16
 4ba:	b9 f7       	brne	.-18     	; 0x4aa <__utoa_common+0x6>
 4bc:	a0 5d       	subi	r26, 0xD0	; 208
 4be:	aa 33       	cpi	r26, 0x3A	; 58
 4c0:	08 f0       	brcs	.+2      	; 0x4c4 <__utoa_common+0x20>
 4c2:	a9 5d       	subi	r26, 0xD9	; 217
 4c4:	a1 93       	st	Z+, r26
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	79 f7       	brne	.-34     	; 0x4a8 <__utoa_common+0x4>
 4ca:	b1 11       	cpse	r27, r1
 4cc:	b1 93       	st	Z+, r27
 4ce:	11 92       	st	Z+, r1
 4d0:	cb 01       	movw	r24, r22
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <strrev>

000004d4 <strrev>:
 4d4:	dc 01       	movw	r26, r24
 4d6:	fc 01       	movw	r30, r24
 4d8:	67 2f       	mov	r22, r23
 4da:	71 91       	ld	r23, Z+
 4dc:	77 23       	and	r23, r23
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <strrev+0x4>
 4e0:	32 97       	sbiw	r30, 0x02	; 2
 4e2:	04 c0       	rjmp	.+8      	; 0x4ec <strrev+0x18>
 4e4:	7c 91       	ld	r23, X
 4e6:	6d 93       	st	X+, r22
 4e8:	70 83       	st	Z, r23
 4ea:	62 91       	ld	r22, -Z
 4ec:	ae 17       	cp	r26, r30
 4ee:	bf 07       	cpc	r27, r31
 4f0:	c8 f3       	brcs	.-14     	; 0x4e4 <strrev+0x10>
 4f2:	08 95       	ret

000004f4 <_exit>:
 4f4:	f8 94       	cli

000004f6 <__stop_program>:
 4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <__stop_program>
