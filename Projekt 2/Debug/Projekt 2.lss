
Projekt 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800200  00000442  000004b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000442  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ceb  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012ed  00000000  00000000  0000239b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008fc  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  00003f84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009c9  00000000  00000000  00004158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000066c  00000000  00000000  00004b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000518d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e4       	ldi	r30, 0x42	; 66
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 39       	cpi	r26, 0x90	; 144
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	8b d0       	rcall	.+278    	; 0x226 <main>
 110:	96 c1       	rjmp	.+812    	; 0x43e <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <_ZN9VandPumpeC1Eh>:
#include "VandPumpe.h"
#include <util/delay.h>

VandPumpe::VandPumpe(uint8_t pin)
: pin_(pin) {
 114:	fc 01       	movw	r30, r24
 116:	60 83       	st	Z, r22
	// Konfigurer den specificerede pin som output
	if (pin_ == 8) {
 118:	68 30       	cpi	r22, 0x08	; 8
 11a:	31 f4       	brne	.+12     	; 0x128 <_ZN9VandPumpeC1Eh+0x14>
		DDRH |= (1 << PH5);  // Sæt PH5 (Pin 8) som output
 11c:	e1 e0       	ldi	r30, 0x01	; 1
 11e:	f1 e0       	ldi	r31, 0x01	; 1
 120:	80 81       	ld	r24, Z
 122:	80 62       	ori	r24, 0x20	; 32
 124:	80 83       	st	Z, r24
 126:	08 95       	ret
		} else if (pin_ == 9) {
 128:	69 30       	cpi	r22, 0x09	; 9
 12a:	31 f4       	brne	.+12     	; 0x138 <_ZN9VandPumpeC1Eh+0x24>
		DDRH |= (1 << PH6);  // Sæt PH6 (Pin 9) som output
 12c:	e1 e0       	ldi	r30, 0x01	; 1
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 83       	st	Z, r24
 136:	08 95       	ret
		} else if (pin_ == 10) {
 138:	6a 30       	cpi	r22, 0x0A	; 10
 13a:	29 f4       	brne	.+10     	; 0x146 <_ZN9VandPumpeC1Eh+0x32>
		DDRH |= (1 << PH7);  // Sæt PH7 (Pin 10) som output
 13c:	e1 e0       	ldi	r30, 0x01	; 1
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	80 81       	ld	r24, Z
 142:	80 68       	ori	r24, 0x80	; 128
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <_ZN9VandPumpe5StartEv>:
	}
}

void VandPumpe::Start() {
	// Aktiver pumpen ved at sætte pin høj
	if (pin_ == 8) {
 148:	fc 01       	movw	r30, r24
 14a:	80 81       	ld	r24, Z
 14c:	88 30       	cpi	r24, 0x08	; 8
 14e:	31 f4       	brne	.+12     	; 0x15c <_ZN9VandPumpe5StartEv+0x14>
		PORTH |= (1 << PH5);
 150:	e2 e0       	ldi	r30, 0x02	; 2
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	80 81       	ld	r24, Z
 156:	80 62       	ori	r24, 0x20	; 32
 158:	80 83       	st	Z, r24
 15a:	08 95       	ret
		} else if (pin_ == 9) {
 15c:	89 30       	cpi	r24, 0x09	; 9
 15e:	31 f4       	brne	.+12     	; 0x16c <_ZN9VandPumpe5StartEv+0x24>
		PORTH |= (1 << PH6);
 160:	e2 e0       	ldi	r30, 0x02	; 2
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	80 81       	ld	r24, Z
 166:	80 64       	ori	r24, 0x40	; 64
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret
		} else if (pin_ == 10) {
 16c:	8a 30       	cpi	r24, 0x0A	; 10
 16e:	29 f4       	brne	.+10     	; 0x17a <_ZN9VandPumpe5StartEv+0x32>
		PORTH |= (1 << PH7);
 170:	e2 e0       	ldi	r30, 0x02	; 2
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	80 81       	ld	r24, Z
 176:	80 68       	ori	r24, 0x80	; 128
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <_ZN9VandPumpe4StopEv>:
	}
}

void VandPumpe::Stop() {
	if (pin_ == 8) {
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	88 30       	cpi	r24, 0x08	; 8
 182:	49 f4       	brne	.+18     	; 0x196 <_ZN9VandPumpe4StopEv+0x1a>
		PORTB &= ~(1 << PB4); // Try clearing both PORT and DDR
 184:	85 b1       	in	r24, 0x05	; 5
 186:	8f 7e       	andi	r24, 0xEF	; 239
 188:	85 b9       	out	0x05, r24	; 5
		DDRH &= ~(1 << PH5);  // Set PH5 as output low
 18a:	e1 e0       	ldi	r30, 0x01	; 1
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	80 81       	ld	r24, Z
 190:	8f 7d       	andi	r24, 0xDF	; 223
 192:	80 83       	st	Z, r24
 194:	08 95       	ret
		} else if (pin_ == 9) {
 196:	89 30       	cpi	r24, 0x09	; 9
 198:	49 f4       	brne	.+18     	; 0x1ac <_ZN9VandPumpe4StopEv+0x30>
		PORTB &= ~(1 << PB5);
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	8f 7d       	andi	r24, 0xDF	; 223
 19e:	85 b9       	out	0x05, r24	; 5
		DDRH &= ~(1 << PH6);
 1a0:	e1 e0       	ldi	r30, 0x01	; 1
 1a2:	f1 e0       	ldi	r31, 0x01	; 1
 1a4:	80 81       	ld	r24, Z
 1a6:	8f 7b       	andi	r24, 0xBF	; 191
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret
		} else if (pin_ == 10) {
 1ac:	8a 30       	cpi	r24, 0x0A	; 10
 1ae:	41 f4       	brne	.+16     	; 0x1c0 <_ZN9VandPumpe4StopEv+0x44>
		PORTB &= ~(1 << PB6);
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	8f 7b       	andi	r24, 0xBF	; 191
 1b4:	85 b9       	out	0x05, r24	; 5
		DDRH &= ~(1 << PH7);
 1b6:	e1 e0       	ldi	r30, 0x01	; 1
 1b8:	f1 e0       	ldi	r31, 0x01	; 1
 1ba:	80 81       	ld	r24, Z
 1bc:	8f 77       	andi	r24, 0x7F	; 127
 1be:	80 83       	st	Z, r24
 1c0:	08 95       	ret

000001c2 <_ZN19JordfugtighedsensorC1Eh>:

// Foruddefineret ADC-kanalmapping
const uint8_t adcMapping[3] = {0, 1, 2};  // Map valg til ADC kanaler (f.eks. ADC0, ADC1, ADC2)

Jordfugtighedsensor::Jordfugtighedsensor(uint8_t adcChoice)
: adcChannel_(adcMapping[adcChoice - 1]) {}  // Mapping fra valg til faktisk ADC kanal
 1c2:	e6 2f       	mov	r30, r22
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	e1 50       	subi	r30, 0x01	; 1
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	20 81       	ld	r18, Z
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
 1d0:	08 95       	ret

000001d2 <_ZN19Jordfugtighedsensor8ADC_initEv>:

void Jordfugtighedsensor::ADC_init() {
	ADMUX = (1 << REFS0);  // Sætter reference til AVcc (5V)
 1d2:	80 e4       	ldi	r24, 0x40	; 64
 1d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Aktiverer ADC og sætter prescaler
 1d8:	87 e8       	ldi	r24, 0x87	; 135
 1da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 1de:	08 95       	ret

000001e0 <_ZN19Jordfugtighedsensor20ADC_readAsPercentageEv>:
}

uint16_t Jordfugtighedsensor::ADC_readAsPercentage() {
 1e0:	dc 01       	movw	r26, r24
	// Vælger ADC-kanal og starter konvertering
	ADMUX = (ADMUX & 0xF0) | (adcChannel_ & 0x0F);
 1e2:	ec e7       	ldi	r30, 0x7C	; 124
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	90 81       	ld	r25, Z
 1e8:	8c 91       	ld	r24, X
 1ea:	90 7f       	andi	r25, 0xF0	; 240
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	89 2b       	or	r24, r25
 1f0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Starter konvertering
 1f2:	ea e7       	ldi	r30, 0x7A	; 122
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	80 64       	ori	r24, 0x40	; 64
 1fa:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));  // Venter på, at konvertering er færdig
 1fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 200:	86 fd       	sbrc	r24, 6
 202:	fc cf       	rjmp	.-8      	; 0x1fc <_ZN19Jordfugtighedsensor20ADC_readAsPercentageEv+0x1c>

	// Konverterer ADC-værdi til fugtighedsprocent
	uint16_t adcValue = ADC;
 204:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 208:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	uint16_t moisturePercentage = ((1023 - adcValue) * 100) / (1023 - 300);
 20c:	4c e9       	ldi	r20, 0x9C	; 156
 20e:	42 03       	mulsu	r20, r18
 210:	c0 01       	movw	r24, r0
 212:	43 9f       	mul	r20, r19
 214:	90 0d       	add	r25, r0
 216:	11 24       	eor	r1, r1
 218:	84 56       	subi	r24, 0x64	; 100
 21a:	90 47       	sbci	r25, 0x70	; 112
 21c:	63 ed       	ldi	r22, 0xD3	; 211
 21e:	72 e0       	ldi	r23, 0x02	; 2
 220:	c7 d0       	rcall	.+398    	; 0x3b0 <__udivmodhi4>
 222:	cb 01       	movw	r24, r22

	return moisturePercentage;  // Returnerer fugtighedsniveau som procent
}
 224:	08 95       	ret

00000226 <main>:
#define MYUBRR ((F_CPU / 16 / BAUD) - 1)

#include <avr/io.h>
#include <util/delay.h>

int main() {
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	00 d0       	rcall	.+0      	; 0x22c <main+0x6>
 22c:	00 d0       	rcall	.+0      	; 0x22e <main+0x8>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
	
	UART uart;
	uart.init(MYUBRR); // Initialiser UART til seriel kommunikation
 232:	67 e6       	ldi	r22, 0x67	; 103
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	78 d0       	rcall	.+240    	; 0x32c <_ZN4UART4initEj>

	// Initialiser en plante med valg for ADC og pumpe pins
	// adcChoice og pumpChoice bruger værdierne 1, 2 eller 3, hvor:
	// 1 = ADC0 / PH5, 2 = ADC1 / PH6, 3 = ADC2 / PH7 på Mega2560
	plante plant1(1, 1, 20, 5);  // adcChoice = 1, pumpChoice = 1, threshold = 20%, varighed = 5 sek.
 23c:	05 e0       	ldi	r16, 0x05	; 5
 23e:	24 e1       	ldi	r18, 0x14	; 20
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	ce 01       	movw	r24, r28
 246:	02 96       	adiw	r24, 0x02	; 2
 248:	35 d0       	rcall	.+106    	; 0x2b4 <_ZN6planteC1Ehhhh>

	
	while (1) {
		uint8_t humidity = plant1.ReadHumidity();
 24a:	ce 01       	movw	r24, r28
 24c:	02 96       	adiw	r24, 0x02	; 2
 24e:	49 d0       	rcall	.+146    	; 0x2e2 <_ZN6plante12ReadHumidityEv>
 250:	18 2f       	mov	r17, r24
		uart.print("Current Humidity: ");
 252:	63 e0       	ldi	r22, 0x03	; 3
 254:	72 e0       	ldi	r23, 0x02	; 2
 256:	ce 01       	movw	r24, r28
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	7a d0       	rcall	.+244    	; 0x350 <_ZN4UART5printEPKc>
		uart.printNumber(humidity);
 25c:	61 2f       	mov	r22, r17
 25e:	ce 01       	movw	r24, r28
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	88 d0       	rcall	.+272    	; 0x374 <_ZN4UART11printNumberEh>
		uart.print("%\n");
 264:	66 e1       	ldi	r22, 0x16	; 22
 266:	72 e0       	ldi	r23, 0x02	; 2
 268:	ce 01       	movw	r24, r28
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	71 d0       	rcall	.+226    	; 0x350 <_ZN4UART5printEPKc>

		if (humidity < plant1.GetHumidityThreshold()) {
 26e:	ce 01       	movw	r24, r28
 270:	02 96       	adiw	r24, 0x02	; 2
 272:	59 d0       	rcall	.+178    	; 0x326 <_ZN6plante20GetHumidityThresholdEv>
 274:	18 17       	cp	r17, r24
 276:	70 f4       	brcc	.+28     	; 0x294 <main+0x6e>
			uart.print("Humidity below threshold! Starting watering...\n");
 278:	69 e1       	ldi	r22, 0x19	; 25
 27a:	72 e0       	ldi	r23, 0x02	; 2
 27c:	ce 01       	movw	r24, r28
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	67 d0       	rcall	.+206    	; 0x350 <_ZN4UART5printEPKc>
			plant1.WaterAutomatically();
 282:	ce 01       	movw	r24, r28
 284:	02 96       	adiw	r24, 0x02	; 2
 286:	2f d0       	rcall	.+94     	; 0x2e6 <_ZN6plante18WaterAutomaticallyEv>
 288:	69 e4       	ldi	r22, 0x49	; 73
			uart.print("Watering complete.\n");
 28a:	72 e0       	ldi	r23, 0x02	; 2
 28c:	ce 01       	movw	r24, r28
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	5f d0       	rcall	.+190    	; 0x350 <_ZN4UART5printEPKc>
 292:	05 c0       	rjmp	.+10     	; 0x29e <main+0x78>
 294:	6d e5       	ldi	r22, 0x5D	; 93
			} 
		else {
			uart.print("Humidity is above threshold. No watering needed.\n");
 296:	72 e0       	ldi	r23, 0x02	; 2
 298:	ce 01       	movw	r24, r28
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	59 d0       	rcall	.+178    	; 0x350 <_ZN4UART5printEPKc>
 29e:	2a ea       	ldi	r18, 0xAA	; 170
 2a0:	36 ee       	ldi	r19, 0xE6	; 230
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	86 e9       	ldi	r24, 0x96	; 150
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	30 40       	sbci	r19, 0x00	; 0
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <main+0x80>
 2b0:	00 00       	nop
 2b2:	cb cf       	rjmp	.-106    	; 0x24a <main+0x24>

000002b4 <_ZN6planteC1Ehhhh>:
#include "plante.h"


plante::plante(uint8_t adcChoice, uint8_t pumpChoice, uint8_t threshold, uint8_t wateringDuration)
 2b4:	ff 92       	push	r15
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	ec 01       	movw	r28, r24
 2c0:	f4 2e       	mov	r15, r20
 2c2:	12 2f       	mov	r17, r18
: sensor_(adcChoice),
pump_(pumpChoice),
humidityThreshold_(threshold),
wateringDuration_(wateringDuration) {
 2c4:	7e df       	rcall	.-260    	; 0x1c2 <_ZN19JordfugtighedsensorC1Eh>
 2c6:	6f 2d       	mov	r22, r15
 2c8:	ce 01       	movw	r24, r28
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	23 df       	rcall	.-442    	; 0x114 <_ZN9VandPumpeC1Eh>
 2ce:	1a 83       	std	Y+2, r17	; 0x02
 2d0:	0b 83       	std	Y+3, r16	; 0x03
	sensor_.ADC_init();
 2d2:	ce 01       	movw	r24, r28
 2d4:	7e df       	rcall	.-260    	; 0x1d2 <_ZN19Jordfugtighedsensor8ADC_initEv>
 2d6:	df 91       	pop	r29
}
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	08 95       	ret

000002e2 <_ZN6plante12ReadHumidityEv>:
 2e2:	7e cf       	rjmp	.-260    	; 0x1e0 <_ZN19Jordfugtighedsensor20ADC_readAsPercentageEv>

uint8_t plante::ReadHumidity() {
	return sensor_.ADC_readAsPercentage();
}
 2e4:	08 95       	ret

000002e6 <_ZN6plante18WaterAutomaticallyEv>:

void plante::WaterAutomatically() {
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	ec 01       	movw	r28, r24
	pump_.Start();  // Start pumpen
 2f0:	8c 01       	movw	r16, r24
 2f2:	0f 5f       	subi	r16, 0xFF	; 255
 2f4:	1f 4f       	sbci	r17, 0xFF	; 255
 2f6:	c8 01       	movw	r24, r16
 2f8:	27 df       	rcall	.-434    	; 0x148 <_ZN9VandPumpe5StartEv>

	for (uint8_t i = 0; i < wateringDuration_; i++) {
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	9b 81       	ldd	r25, Y+3	; 0x03
 2fe:	89 17       	cp	r24, r25
 300:	58 f4       	brcc	.+22     	; 0x318 <_ZN6plante18WaterAutomaticallyEv+0x32>
 302:	2f ef       	ldi	r18, 0xFF	; 255
 304:	33 ed       	ldi	r19, 0xD3	; 211
 306:	90 e3       	ldi	r25, 0x30	; 48
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	30 40       	sbci	r19, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <_ZN6plante18WaterAutomaticallyEv+0x22>
 310:	00 c0       	rjmp	.+0      	; 0x312 <_ZN6plante18WaterAutomaticallyEv+0x2c>
 312:	00 00       	nop
 314:	8f 5f       	subi	r24, 0xFF	; 255
 316:	f2 cf       	rjmp	.-28     	; 0x2fc <_ZN6plante18WaterAutomaticallyEv+0x16>
		_delay_ms(1000);  // Delay i sekunder, baseret på varighed
	}
	pump_.Stop();  // Stop pumpen efter varighed
 318:	c8 01       	movw	r24, r16
 31a:	30 df       	rcall	.-416    	; 0x17c <_ZN9VandPumpe4StopEv>
}
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	08 95       	ret

00000326 <_ZN6plante20GetHumidityThresholdEv>:

uint8_t plante::GetHumidityThreshold() {
	return humidityThreshold_;
}
 326:	fc 01       	movw	r30, r24
 328:	82 81       	ldd	r24, Z+2	; 0x02
 32a:	08 95       	ret

0000032c <_ZN4UART4initEj>:
#include "UART.h"
#include <stdlib.h>  // Inkluderer stdlib.h for itoa funktion

// Initialiserer UART ved hjælp af den angivne UBRR værdi
void UART::init(uint16_t ubrr) {
	UBRR0H = (ubrr >> 8);      // Sætter den høje byte af UBRR
 32c:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = ubrr;             // Sætter den lave byte af UBRR
 330:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B = (1 << TXEN0);     // Aktiverer transmitter
 334:	88 e0       	ldi	r24, 0x08	; 8
 336:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Sætter 8 data bits og 1 stop bit
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 340:	08 95       	ret

00000342 <_ZN4UART8transmitEc>:
}

void UART::transmit(char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Venter på, at transmit-bufferen er klar
 342:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 346:	85 ff       	sbrs	r24, 5
 348:	fc cf       	rjmp	.-8      	; 0x342 <_ZN4UART8transmitEc>
	UDR0 = data;                       // Skriver data til transmit-bufferen
 34a:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 34e:	08 95       	ret

00000350 <_ZN4UART5printEPKc>:
}

void UART::print(const char* str) {
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	8c 01       	movw	r16, r24
 35a:	eb 01       	movw	r28, r22
	while (*str) {
 35c:	68 81       	ld	r22, Y
 35e:	66 23       	and	r22, r22
 360:	21 f0       	breq	.+8      	; 0x36a <_ZN4UART5printEPKc+0x1a>
		transmit(*str++);
 362:	21 96       	adiw	r28, 0x01	; 1
 364:	c8 01       	movw	r24, r16
 366:	ed df       	rcall	.-38     	; 0x342 <_ZN4UART8transmitEc>
	while (!(UCSR0A & (1 << UDRE0)));  // Venter på, at transmit-bufferen er klar
	UDR0 = data;                       // Skriver data til transmit-bufferen
}

void UART::print(const char* str) {
	while (*str) {
 368:	f9 cf       	rjmp	.-14     	; 0x35c <_ZN4UART5printEPKc+0xc>
		transmit(*str++);
	}
}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <_ZN4UART11printNumberEh>:

void UART::printNumber(uint8_t number) {
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	00 d0       	rcall	.+0      	; 0x37e <_ZN4UART11printNumberEh+0xa>
 37e:	1f 92       	push	r1
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	8c 01       	movw	r16, r24
 386:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 388:	4a e0       	ldi	r20, 0x0A	; 10
 38a:	be 01       	movw	r22, r28
 38c:	6f 5f       	subi	r22, 0xFF	; 255
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	22 d0       	rcall	.+68     	; 0x3d8 <__itoa_ncheck>
	char buffer[4];
	itoa(number, buffer, 10);  // Konverterer tallet til tekst (decimal-basis)
	print(buffer);             // Sender tallet som tekst
 394:	be 01       	movw	r22, r28
 396:	6f 5f       	subi	r22, 0xFF	; 255
 398:	7f 4f       	sbci	r23, 0xFF	; 255
 39a:	c8 01       	movw	r24, r16
 39c:	d9 df       	rcall	.-78     	; 0x350 <_ZN4UART5printEPKc>
}
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	08 95       	ret

000003b0 <__udivmodhi4>:
 3b0:	aa 1b       	sub	r26, r26
 3b2:	bb 1b       	sub	r27, r27
 3b4:	51 e1       	ldi	r21, 0x11	; 17
 3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <__udivmodhi4_ep>

000003b8 <__udivmodhi4_loop>:
 3b8:	aa 1f       	adc	r26, r26
 3ba:	bb 1f       	adc	r27, r27
 3bc:	a6 17       	cp	r26, r22
 3be:	b7 07       	cpc	r27, r23
 3c0:	10 f0       	brcs	.+4      	; 0x3c6 <__udivmodhi4_ep>
 3c2:	a6 1b       	sub	r26, r22
 3c4:	b7 0b       	sbc	r27, r23

000003c6 <__udivmodhi4_ep>:
 3c6:	88 1f       	adc	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	5a 95       	dec	r21
 3cc:	a9 f7       	brne	.-22     	; 0x3b8 <__udivmodhi4_loop>
 3ce:	80 95       	com	r24
 3d0:	90 95       	com	r25
 3d2:	bc 01       	movw	r22, r24
 3d4:	cd 01       	movw	r24, r26
 3d6:	08 95       	ret

000003d8 <__itoa_ncheck>:
 3d8:	bb 27       	eor	r27, r27
 3da:	4a 30       	cpi	r20, 0x0A	; 10
 3dc:	31 f4       	brne	.+12     	; 0x3ea <__itoa_ncheck+0x12>
 3de:	99 23       	and	r25, r25
 3e0:	22 f4       	brpl	.+8      	; 0x3ea <__itoa_ncheck+0x12>
 3e2:	bd e2       	ldi	r27, 0x2D	; 45
 3e4:	90 95       	com	r25
 3e6:	81 95       	neg	r24
 3e8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <__utoa_common>

000003ec <__utoa_ncheck>:
 3ec:	bb 27       	eor	r27, r27

000003ee <__utoa_common>:
 3ee:	fb 01       	movw	r30, r22
 3f0:	55 27       	eor	r21, r21
 3f2:	aa 27       	eor	r26, r26
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	aa 1f       	adc	r26, r26
 3fa:	a4 17       	cp	r26, r20
 3fc:	10 f0       	brcs	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	a4 1b       	sub	r26, r20
 400:	83 95       	inc	r24
 402:	50 51       	subi	r21, 0x10	; 16
 404:	b9 f7       	brne	.-18     	; 0x3f4 <__utoa_common+0x6>
 406:	a0 5d       	subi	r26, 0xD0	; 208
 408:	aa 33       	cpi	r26, 0x3A	; 58
 40a:	08 f0       	brcs	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	a9 5d       	subi	r26, 0xD9	; 217
 40e:	a1 93       	st	Z+, r26
 410:	00 97       	sbiw	r24, 0x00	; 0
 412:	79 f7       	brne	.-34     	; 0x3f2 <__utoa_common+0x4>
 414:	b1 11       	cpse	r27, r1
 416:	b1 93       	st	Z+, r27
 418:	11 92       	st	Z+, r1
 41a:	cb 01       	movw	r24, r22
 41c:	00 c0       	rjmp	.+0      	; 0x41e <strrev>

0000041e <strrev>:
 41e:	dc 01       	movw	r26, r24
 420:	fc 01       	movw	r30, r24
 422:	67 2f       	mov	r22, r23
 424:	71 91       	ld	r23, Z+
 426:	77 23       	and	r23, r23
 428:	e1 f7       	brne	.-8      	; 0x422 <strrev+0x4>
 42a:	32 97       	sbiw	r30, 0x02	; 2
 42c:	04 c0       	rjmp	.+8      	; 0x436 <strrev+0x18>
 42e:	7c 91       	ld	r23, X
 430:	6d 93       	st	X+, r22
 432:	70 83       	st	Z, r23
 434:	62 91       	ld	r22, -Z
 436:	ae 17       	cp	r26, r30
 438:	bf 07       	cpc	r27, r31
 43a:	c8 f3       	brcs	.-14     	; 0x42e <strrev+0x10>
 43c:	08 95       	ret

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
