
Projekt 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800200  00000558  000005ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000558  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800262  00800262  0000064e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f33  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011fc  00000000  00000000  000026e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000746  00000000  00000000  000038df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00004028  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a32  00000000  00000000  000041f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060c  00000000  00000000  00004c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000522e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e5       	ldi	r30, 0x58	; 88
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 36       	cpi	r26, 0x62	; 98
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e6       	ldi	r26, 0x62	; 98
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 36       	cpi	r26, 0x63	; 99
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4a d0       	rcall	.+148    	; 0x1b4 <main>
 120:	19 c2       	rjmp	.+1074   	; 0x554 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_ZN19Jordfugtighedsensor11GetHumidityEv>:
void Jordfugtighedsensor::SetHumidity(){ // Anderledes fra klassediagram, tror klassediagram har en lille fejl her
	humidity = ADC_readAsPercentage();
}

void Jordfugtighedsensor::SetThreshold(int NytTreshold){
	threshold = NytTreshold;
 124:	fc 01       	movw	r30, r24
 126:	80 81       	ld	r24, Z
 128:	91 81       	ldd	r25, Z+1	; 0x01
 12a:	08 95       	ret

0000012c <_ZN19Jordfugtighedsensor12GetThresholdEv>:
 12c:	fc 01       	movw	r30, r24
 12e:	82 81       	ldd	r24, Z+2	; 0x02
 130:	93 81       	ldd	r25, Z+3	; 0x03
 132:	08 95       	ret

00000134 <_ZN19Jordfugtighedsensor8ADC_initEv>:
}

void Jordfugtighedsensor::ADC_init() {
	ADMUX = (1 << REFS0);  // Sætter reference til AVcc (5V)
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Aktiverer ADC og sætter prescaler
 13a:	87 e8       	ldi	r24, 0x87	; 135
 13c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 140:	08 95       	ret

00000142 <_ZN19JordfugtighedsensorC1Eii>:
#include "Jordfugtighedsensor.h"

Jordfugtighedsensor::Jordfugtighedsensor(int NytThreshold, int pin)
: humidity(0), threshold(NytThreshold), adcPin(pin) {
 142:	fc 01       	movw	r30, r24
 144:	11 82       	std	Z+1, r1	; 0x01
 146:	10 82       	st	Z, r1
 148:	73 83       	std	Z+3, r23	; 0x03
 14a:	62 83       	std	Z+2, r22	; 0x02
 14c:	55 83       	std	Z+5, r21	; 0x05
 14e:	44 83       	std	Z+4, r20	; 0x04
	ADC_init(); // Call ADC_init() here
 150:	f1 cf       	rjmp	.-30     	; 0x134 <_ZN19Jordfugtighedsensor8ADC_initEv>
 152:	08 95       	ret

00000154 <_ZN19Jordfugtighedsensor20ADC_readAsPercentageEv>:
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Aktiverer ADC og sætter prescaler
}
	
double Jordfugtighedsensor::ADC_readAsPercentage(){  // Retunere Humidity som procent
	
	ADMUX = (ADMUX & 0xF0) | (adcPin & 0x0F);
 154:	ec e7       	ldi	r30, 0x7C	; 124
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	20 81       	ld	r18, Z
 15a:	dc 01       	movw	r26, r24
 15c:	14 96       	adiw	r26, 0x04	; 4
 15e:	8c 91       	ld	r24, X
 160:	20 7f       	andi	r18, 0xF0	; 240
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	82 2b       	or	r24, r18
 166:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Starter konvertering
 168:	ea e7       	ldi	r30, 0x7A	; 122
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 64       	ori	r24, 0x40	; 64
 170:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));  // Venter på, at konvertering er færdig
 172:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 176:	86 fd       	sbrc	r24, 6
 178:	fc cf       	rjmp	.-8      	; 0x172 <_ZN19Jordfugtighedsensor20ADC_readAsPercentageEv+0x1e>
	
	double moisturePercentage = ((1023 - ADC) * 100) / (1023 - 300); // ADC registeret indeholder værdien for det digitale signal 
 17a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 17e:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 182:	4c e9       	ldi	r20, 0x9C	; 156
 184:	42 03       	mulsu	r20, r18
 186:	c0 01       	movw	r24, r0
 188:	43 9f       	mul	r20, r19
 18a:	90 0d       	add	r25, r0
 18c:	11 24       	eor	r1, r1
 18e:	84 56       	subi	r24, 0x64	; 100
 190:	90 47       	sbci	r25, 0x70	; 112
 192:	63 ed       	ldi	r22, 0xD3	; 211
 194:	72 e0       	ldi	r23, 0x02	; 2
 196:	97 d1       	rcall	.+814    	; 0x4c6 <__udivmodhi4>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	2e c1       	rjmp	.+604    	; 0x3fa <__floatunsisf>
return moisturePercentage;
 19e:	08 95       	ret

000001a0 <_ZN19Jordfugtighedsensor11SetHumidityEv>:
	return humidity;
}
int Jordfugtighedsensor::GetThreshold(){
	return threshold;
}
void Jordfugtighedsensor::SetHumidity(){ // Anderledes fra klassediagram, tror klassediagram har en lille fejl her
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
	humidity = ADC_readAsPercentage();
 1a6:	d6 df       	rcall	.-84     	; 0x154 <_ZN19Jordfugtighedsensor20ADC_readAsPercentageEv>
 1a8:	f7 d0       	rcall	.+494    	; 0x398 <__fixsfsi>
 1aa:	79 83       	std	Y+1, r23	; 0x01
 1ac:	68 83       	st	Y, r22
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <main>:
#include <util/delay.h>


UART uart;  // Create an instance of the UART class

int main(void) {
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	a4 97       	sbiw	r28, 0x24	; 36
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
	// Initialize UART
	uart.init(MY_UBRR);
 1c8:	67 e6       	ldi	r22, 0x67	; 103
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	82 e6       	ldi	r24, 0x62	; 98
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	a1 d0       	rcall	.+322    	; 0x314 <_ZN4UART4initEj>

	// Create a Potteplante instance with an ID, Sensor Pin, Humidity Threshold, and Watering Duration
	Potteplante plant1( 1, 0 , 20 , 5); 
 1d2:	05 e0       	ldi	r16, 0x05	; 5
 1d4:	10 e0       	ldi	r17, 0x00	; 0
 1d6:	24 e1       	ldi	r18, 0x14	; 20
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	ce 01       	movw	r24, r28
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	7c d0       	rcall	.+248    	; 0x2e0 <_ZN11PotteplanteC1Eiiii>
	Potteplante plant2( 2, 0 , 20 , 5);
 1e8:	24 e1       	ldi	r18, 0x14	; 20
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	62 e0       	ldi	r22, 0x02	; 2
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	ce 01       	movw	r24, r28
 1f6:	43 96       	adiw	r24, 0x13	; 19
 1f8:	73 d0       	rcall	.+230    	; 0x2e0 <_ZN11PotteplanteC1Eiiii>

	// Main loop
	while (1) {
		// Update the sensor (this will call SetHumidity in the sensor class)
		plant1.UpdateSensor();
 1fa:	ce 01       	movw	r24, r28
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	87 d0       	rcall	.+270    	; 0x30e <_ZN11Potteplante12UpdateSensorEv>
 200:	60 e0       	ldi	r22, 0x00	; 0
		// Send humidity value via UART
		uart.print("Humidity for plant 1: ");
 202:	72 e0       	ldi	r23, 0x02	; 2
 204:	82 e6       	ldi	r24, 0x62	; 98
 206:	92 e0       	ldi	r25, 0x02	; 2
 208:	97 d0       	rcall	.+302    	; 0x338 <_ZN4UART5printEPKc>
		uart.printNumber(plant1.GetHumidity());
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	79 d0       	rcall	.+242    	; 0x302 <_ZN11Potteplante11GetHumidityEv>
 210:	68 2f       	mov	r22, r24
 212:	82 e6       	ldi	r24, 0x62	; 98
 214:	92 e0       	ldi	r25, 0x02	; 2
 216:	a2 d0       	rcall	.+324    	; 0x35c <_ZN4UART11printNumberEh>
		uart.print("\r\n");
 218:	67 e1       	ldi	r22, 0x17	; 23
 21a:	72 e0       	ldi	r23, 0x02	; 2
 21c:	82 e6       	ldi	r24, 0x62	; 98
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	8b d0       	rcall	.+278    	; 0x338 <_ZN4UART5printEPKc>
		// Send threshold value via UART
		uart.print("Threshold for plant 1: ");
 222:	6a e1       	ldi	r22, 0x1A	; 26
 224:	72 e0       	ldi	r23, 0x02	; 2
 226:	82 e6       	ldi	r24, 0x62	; 98
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	86 d0       	rcall	.+268    	; 0x338 <_ZN4UART5printEPKc>
		uart.printNumber(plant1.GetThreshold());
 22c:	ce 01       	movw	r24, r28
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	6b d0       	rcall	.+214    	; 0x308 <_ZN11Potteplante12GetThresholdEv>
 232:	68 2f       	mov	r22, r24
 234:	82 e6       	ldi	r24, 0x62	; 98
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	91 d0       	rcall	.+290    	; 0x35c <_ZN4UART11printNumberEh>
		uart.print("\r\n");
 23a:	67 e1       	ldi	r22, 0x17	; 23
 23c:	72 e0       	ldi	r23, 0x02	; 2
 23e:	82 e6       	ldi	r24, 0x62	; 98
 240:	92 e0       	ldi	r25, 0x02	; 2
 242:	7a d0       	rcall	.+244    	; 0x338 <_ZN4UART5printEPKc>
		uart.print("\r\n");
 244:	67 e1       	ldi	r22, 0x17	; 23
 246:	72 e0       	ldi	r23, 0x02	; 2
 248:	82 e6       	ldi	r24, 0x62	; 98
 24a:	92 e0       	ldi	r25, 0x02	; 2
 24c:	75 d0       	rcall	.+234    	; 0x338 <_ZN4UART5printEPKc>
 24e:	67 e1       	ldi	r22, 0x17	; 23
		uart.print("\r\n");
 250:	72 e0       	ldi	r23, 0x02	; 2
 252:	82 e6       	ldi	r24, 0x62	; 98
 254:	92 e0       	ldi	r25, 0x02	; 2
 256:	70 d0       	rcall	.+224    	; 0x338 <_ZN4UART5printEPKc>
 258:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	39 e6       	ldi	r19, 0x69	; 105
 25c:	88 e1       	ldi	r24, 0x18	; 24
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	30 40       	sbci	r19, 0x00	; 0
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0xaa>
 266:	00 c0       	rjmp	.+0      	; 0x268 <main+0xb4>
		
		_delay_ms(500);

		plant2.UpdateSensor();
 268:	00 00       	nop
 26a:	ce 01       	movw	r24, r28
 26c:	43 96       	adiw	r24, 0x13	; 19
		// Send humidity value via UART
		uart.print("Humidity for plant 2: ");
 26e:	4f d0       	rcall	.+158    	; 0x30e <_ZN11Potteplante12UpdateSensorEv>
 270:	62 e3       	ldi	r22, 0x32	; 50
 272:	72 e0       	ldi	r23, 0x02	; 2
 274:	82 e6       	ldi	r24, 0x62	; 98
 276:	92 e0       	ldi	r25, 0x02	; 2
		uart.printNumber(plant2.GetHumidity());
 278:	5f d0       	rcall	.+190    	; 0x338 <_ZN4UART5printEPKc>
 27a:	ce 01       	movw	r24, r28
 27c:	43 96       	adiw	r24, 0x13	; 19
 27e:	41 d0       	rcall	.+130    	; 0x302 <_ZN11Potteplante11GetHumidityEv>
 280:	68 2f       	mov	r22, r24
 282:	82 e6       	ldi	r24, 0x62	; 98
 284:	92 e0       	ldi	r25, 0x02	; 2
		uart.print("\r\n");
 286:	6a d0       	rcall	.+212    	; 0x35c <_ZN4UART11printNumberEh>
 288:	67 e1       	ldi	r22, 0x17	; 23
 28a:	72 e0       	ldi	r23, 0x02	; 2
 28c:	82 e6       	ldi	r24, 0x62	; 98
 28e:	92 e0       	ldi	r25, 0x02	; 2
		// Send threshold value via UART
		uart.print("Threshold for plant 2: ");
 290:	53 d0       	rcall	.+166    	; 0x338 <_ZN4UART5printEPKc>
 292:	69 e4       	ldi	r22, 0x49	; 73
 294:	72 e0       	ldi	r23, 0x02	; 2
 296:	82 e6       	ldi	r24, 0x62	; 98
 298:	92 e0       	ldi	r25, 0x02	; 2
		uart.printNumber(plant2.GetThreshold());
 29a:	4e d0       	rcall	.+156    	; 0x338 <_ZN4UART5printEPKc>
 29c:	ce 01       	movw	r24, r28
 29e:	43 96       	adiw	r24, 0x13	; 19
 2a0:	33 d0       	rcall	.+102    	; 0x308 <_ZN11Potteplante12GetThresholdEv>
 2a2:	68 2f       	mov	r22, r24
 2a4:	82 e6       	ldi	r24, 0x62	; 98
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	59 d0       	rcall	.+178    	; 0x35c <_ZN4UART11printNumberEh>
		uart.print("\r\n");
 2aa:	67 e1       	ldi	r22, 0x17	; 23
 2ac:	72 e0       	ldi	r23, 0x02	; 2
 2ae:	82 e6       	ldi	r24, 0x62	; 98
 2b0:	92 e0       	ldi	r25, 0x02	; 2
 2b2:	42 d0       	rcall	.+132    	; 0x338 <_ZN4UART5printEPKc>
 2b4:	67 e1       	ldi	r22, 0x17	; 23
		uart.print("\r\n");
 2b6:	72 e0       	ldi	r23, 0x02	; 2
 2b8:	82 e6       	ldi	r24, 0x62	; 98
 2ba:	92 e0       	ldi	r25, 0x02	; 2
 2bc:	3d d0       	rcall	.+122    	; 0x338 <_ZN4UART5printEPKc>
 2be:	67 e1       	ldi	r22, 0x17	; 23
 2c0:	72 e0       	ldi	r23, 0x02	; 2
		uart.print("\r\n");
 2c2:	82 e6       	ldi	r24, 0x62	; 98
 2c4:	92 e0       	ldi	r25, 0x02	; 2
 2c6:	38 d0       	rcall	.+112    	; 0x338 <_ZN4UART5printEPKc>
 2c8:	9f ef       	ldi	r25, 0xFF	; 255
 2ca:	23 e2       	ldi	r18, 0x23	; 35
 2cc:	34 ef       	ldi	r19, 0xF4	; 244
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	91 50       	subi	r25, 0x01	; 1
 2d2:	20 40       	sbci	r18, 0x00	; 0
 2d4:	30 40       	sbci	r19, 0x00	; 0
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	d9 f7       	brne	.-10     	; 0x2d0 <main+0x11c>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x128>
 2dc:	00 00       	nop
 2de:	8d cf       	rjmp	.-230    	; 0x1fa <main+0x46>

000002e0 <_ZN11PotteplanteC1Eiiii>:
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	fc 01       	movw	r30, r24
int Potteplante::GetThreshold(){
	return jordfugtighedsensor.GetThreshold();
}

void Potteplante::SetThreshold(int NyHumidityTreshold){
	jordfugtighedsensor.SetThreshold(NyHumidityTreshold);
 2e6:	71 83       	std	Z+1, r23	; 0x01
 2e8:	60 83       	st	Z, r22
 2ea:	53 83       	std	Z+3, r21	; 0x03
 2ec:	42 83       	std	Z+2, r20	; 0x02
 2ee:	35 83       	std	Z+5, r19	; 0x05
 2f0:	24 83       	std	Z+4, r18	; 0x04
 2f2:	17 83       	std	Z+7, r17	; 0x07
 2f4:	06 83       	std	Z+6, r16	; 0x06
 2f6:	b9 01       	movw	r22, r18
 2f8:	0c 96       	adiw	r24, 0x0c	; 12
 2fa:	23 df       	rcall	.-442    	; 0x142 <_ZN19JordfugtighedsensorC1Eii>
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	08 95       	ret

00000302 <_ZN11Potteplante11GetHumidityEv>:
 302:	0c 96       	adiw	r24, 0x0c	; 12
 304:	0f cf       	rjmp	.-482    	; 0x124 <_ZN19Jordfugtighedsensor11GetHumidityEv>
 306:	08 95       	ret

00000308 <_ZN11Potteplante12GetThresholdEv>:
 308:	0c 96       	adiw	r24, 0x0c	; 12
 30a:	10 cf       	rjmp	.-480    	; 0x12c <_ZN19Jordfugtighedsensor12GetThresholdEv>
 30c:	08 95       	ret

0000030e <_ZN11Potteplante12UpdateSensorEv>:
}

void Potteplante::UpdateSensor(){
	jordfugtighedsensor.SetHumidity();
 30e:	0c 96       	adiw	r24, 0x0c	; 12
 310:	47 cf       	rjmp	.-370    	; 0x1a0 <_ZN19Jordfugtighedsensor11SetHumidityEv>
 312:	08 95       	ret

00000314 <_ZN4UART4initEj>:
#include "UART.h"
#include <stdlib.h>  // Inkluderer stdlib.h for itoa funktion

// Initialiserer UART ved hjælp af den angivne UBRR værdi
void UART::init(uint16_t ubrr) {
	UBRR0H = (ubrr >> 8);      // Sætter den høje byte af UBRR
 314:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = ubrr;             // Sætter den lave byte af UBRR
 318:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B = (1 << TXEN0);     // Aktiverer transmitter
 31c:	88 e0       	ldi	r24, 0x08	; 8
 31e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Sætter 8 data bits og 1 stop bit
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 328:	08 95       	ret

0000032a <_ZN4UART8transmitEc>:
}

void UART::transmit(char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Venter på, at transmit-bufferen er klar
 32a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 32e:	85 ff       	sbrs	r24, 5
 330:	fc cf       	rjmp	.-8      	; 0x32a <_ZN4UART8transmitEc>
	UDR0 = data;                       // Skriver data til transmit-bufferen
 332:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 336:	08 95       	ret

00000338 <_ZN4UART5printEPKc>:
}

void UART::print(const char* str) {
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	8c 01       	movw	r16, r24
 342:	eb 01       	movw	r28, r22
	while (*str) {
 344:	68 81       	ld	r22, Y
 346:	66 23       	and	r22, r22
 348:	21 f0       	breq	.+8      	; 0x352 <_ZN4UART5printEPKc+0x1a>
		transmit(*str++);
 34a:	21 96       	adiw	r28, 0x01	; 1
 34c:	c8 01       	movw	r24, r16
 34e:	ed df       	rcall	.-38     	; 0x32a <_ZN4UART8transmitEc>
	while (!(UCSR0A & (1 << UDRE0)));  // Venter på, at transmit-bufferen er klar
	UDR0 = data;                       // Skriver data til transmit-bufferen
}

void UART::print(const char* str) {
	while (*str) {
 350:	f9 cf       	rjmp	.-14     	; 0x344 <_ZN4UART5printEPKc+0xc>
		transmit(*str++);
	}
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <_ZN4UART11printNumberEh>:

void UART::printNumber(uint8_t number) {
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	00 d0       	rcall	.+0      	; 0x366 <_ZN4UART11printNumberEh+0xa>
 366:	1f 92       	push	r1
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	8c 01       	movw	r16, r24
 36e:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 370:	4a e0       	ldi	r20, 0x0A	; 10
 372:	be 01       	movw	r22, r28
 374:	6f 5f       	subi	r22, 0xFF	; 255
 376:	7f 4f       	sbci	r23, 0xFF	; 255
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	b9 d0       	rcall	.+370    	; 0x4ee <__itoa_ncheck>
	char buffer[4];
	itoa(number, buffer, 10);  // Konverterer tallet til tekst (decimal-basis)
	print(buffer);             // Sender tallet som tekst
 37c:	be 01       	movw	r22, r28
 37e:	6f 5f       	subi	r22, 0xFF	; 255
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 382:	c8 01       	movw	r24, r16
 384:	d9 df       	rcall	.-78     	; 0x338 <_ZN4UART5printEPKc>
}
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	08 95       	ret

00000398 <__fixsfsi>:
 398:	04 d0       	rcall	.+8      	; 0x3a2 <__fixunssfsi>
 39a:	68 94       	set
 39c:	b1 11       	cpse	r27, r1
 39e:	8d c0       	rjmp	.+282    	; 0x4ba <__fp_szero>
 3a0:	08 95       	ret

000003a2 <__fixunssfsi>:
 3a2:	70 d0       	rcall	.+224    	; 0x484 <__fp_splitA>
 3a4:	88 f0       	brcs	.+34     	; 0x3c8 <__fixunssfsi+0x26>
 3a6:	9f 57       	subi	r25, 0x7F	; 127
 3a8:	90 f0       	brcs	.+36     	; 0x3ce <__fixunssfsi+0x2c>
 3aa:	b9 2f       	mov	r27, r25
 3ac:	99 27       	eor	r25, r25
 3ae:	b7 51       	subi	r27, 0x17	; 23
 3b0:	a0 f0       	brcs	.+40     	; 0x3da <__fixunssfsi+0x38>
 3b2:	d1 f0       	breq	.+52     	; 0x3e8 <__fixunssfsi+0x46>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	88 1f       	adc	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	1a f0       	brmi	.+6      	; 0x3c4 <__fixunssfsi+0x22>
 3be:	ba 95       	dec	r27
 3c0:	c9 f7       	brne	.-14     	; 0x3b4 <__fixunssfsi+0x12>
 3c2:	12 c0       	rjmp	.+36     	; 0x3e8 <__fixunssfsi+0x46>
 3c4:	b1 30       	cpi	r27, 0x01	; 1
 3c6:	81 f0       	breq	.+32     	; 0x3e8 <__fixunssfsi+0x46>
 3c8:	77 d0       	rcall	.+238    	; 0x4b8 <__fp_zero>
 3ca:	b1 e0       	ldi	r27, 0x01	; 1
 3cc:	08 95       	ret
 3ce:	74 c0       	rjmp	.+232    	; 0x4b8 <__fp_zero>
 3d0:	67 2f       	mov	r22, r23
 3d2:	78 2f       	mov	r23, r24
 3d4:	88 27       	eor	r24, r24
 3d6:	b8 5f       	subi	r27, 0xF8	; 248
 3d8:	39 f0       	breq	.+14     	; 0x3e8 <__fixunssfsi+0x46>
 3da:	b9 3f       	cpi	r27, 0xF9	; 249
 3dc:	cc f3       	brlt	.-14     	; 0x3d0 <__fixunssfsi+0x2e>
 3de:	86 95       	lsr	r24
 3e0:	77 95       	ror	r23
 3e2:	67 95       	ror	r22
 3e4:	b3 95       	inc	r27
 3e6:	d9 f7       	brne	.-10     	; 0x3de <__fixunssfsi+0x3c>
 3e8:	3e f4       	brtc	.+14     	; 0x3f8 <__fixunssfsi+0x56>
 3ea:	90 95       	com	r25
 3ec:	80 95       	com	r24
 3ee:	70 95       	com	r23
 3f0:	61 95       	neg	r22
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	8f 4f       	sbci	r24, 0xFF	; 255
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	08 95       	ret

000003fa <__floatunsisf>:
 3fa:	e8 94       	clt
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

000003fe <__floatsisf>:
 3fe:	97 fb       	bst	r25, 7
 400:	3e f4       	brtc	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 402:	90 95       	com	r25
 404:	80 95       	com	r24
 406:	70 95       	com	r23
 408:	61 95       	neg	r22
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	8f 4f       	sbci	r24, 0xFF	; 255
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	99 23       	and	r25, r25
 412:	a9 f0       	breq	.+42     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 414:	f9 2f       	mov	r31, r25
 416:	96 e9       	ldi	r25, 0x96	; 150
 418:	bb 27       	eor	r27, r27
 41a:	93 95       	inc	r25
 41c:	f6 95       	lsr	r31
 41e:	87 95       	ror	r24
 420:	77 95       	ror	r23
 422:	67 95       	ror	r22
 424:	b7 95       	ror	r27
 426:	f1 11       	cpse	r31, r1
 428:	f8 cf       	rjmp	.-16     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 42a:	fa f4       	brpl	.+62     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 42c:	bb 0f       	add	r27, r27
 42e:	11 f4       	brne	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	60 ff       	sbrs	r22, 0
 432:	1b c0       	rjmp	.+54     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	16 c0       	rjmp	.+44     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 43e:	88 23       	and	r24, r24
 440:	11 f0       	breq	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	96 e9       	ldi	r25, 0x96	; 150
 444:	11 c0       	rjmp	.+34     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 446:	77 23       	and	r23, r23
 448:	21 f0       	breq	.+8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44a:	9e e8       	ldi	r25, 0x8E	; 142
 44c:	87 2f       	mov	r24, r23
 44e:	76 2f       	mov	r23, r22
 450:	05 c0       	rjmp	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 452:	66 23       	and	r22, r22
 454:	71 f0       	breq	.+28     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 456:	96 e8       	ldi	r25, 0x86	; 134
 458:	86 2f       	mov	r24, r22
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	2a f0       	brmi	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 460:	9a 95       	dec	r25
 462:	66 0f       	add	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	88 1f       	adc	r24, r24
 468:	da f7       	brpl	.-10     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 46a:	88 0f       	add	r24, r24
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	97 f9       	bld	r25, 7
 472:	08 95       	ret

00000474 <__fp_split3>:
 474:	57 fd       	sbrc	r21, 7
 476:	90 58       	subi	r25, 0x80	; 128
 478:	44 0f       	add	r20, r20
 47a:	55 1f       	adc	r21, r21
 47c:	59 f0       	breq	.+22     	; 0x494 <__fp_splitA+0x10>
 47e:	5f 3f       	cpi	r21, 0xFF	; 255
 480:	71 f0       	breq	.+28     	; 0x49e <__fp_splitA+0x1a>
 482:	47 95       	ror	r20

00000484 <__fp_splitA>:
 484:	88 0f       	add	r24, r24
 486:	97 fb       	bst	r25, 7
 488:	99 1f       	adc	r25, r25
 48a:	61 f0       	breq	.+24     	; 0x4a4 <__fp_splitA+0x20>
 48c:	9f 3f       	cpi	r25, 0xFF	; 255
 48e:	79 f0       	breq	.+30     	; 0x4ae <__fp_splitA+0x2a>
 490:	87 95       	ror	r24
 492:	08 95       	ret
 494:	12 16       	cp	r1, r18
 496:	13 06       	cpc	r1, r19
 498:	14 06       	cpc	r1, r20
 49a:	55 1f       	adc	r21, r21
 49c:	f2 cf       	rjmp	.-28     	; 0x482 <__fp_split3+0xe>
 49e:	46 95       	lsr	r20
 4a0:	f1 df       	rcall	.-30     	; 0x484 <__fp_splitA>
 4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <__fp_splitA+0x30>
 4a4:	16 16       	cp	r1, r22
 4a6:	17 06       	cpc	r1, r23
 4a8:	18 06       	cpc	r1, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	f1 cf       	rjmp	.-30     	; 0x490 <__fp_splitA+0xc>
 4ae:	86 95       	lsr	r24
 4b0:	71 05       	cpc	r23, r1
 4b2:	61 05       	cpc	r22, r1
 4b4:	08 94       	sec
 4b6:	08 95       	ret

000004b8 <__fp_zero>:
 4b8:	e8 94       	clt

000004ba <__fp_szero>:
 4ba:	bb 27       	eor	r27, r27
 4bc:	66 27       	eor	r22, r22
 4be:	77 27       	eor	r23, r23
 4c0:	cb 01       	movw	r24, r22
 4c2:	97 f9       	bld	r25, 7
 4c4:	08 95       	ret

000004c6 <__udivmodhi4>:
 4c6:	aa 1b       	sub	r26, r26
 4c8:	bb 1b       	sub	r27, r27
 4ca:	51 e1       	ldi	r21, 0x11	; 17
 4cc:	07 c0       	rjmp	.+14     	; 0x4dc <__udivmodhi4_ep>

000004ce <__udivmodhi4_loop>:
 4ce:	aa 1f       	adc	r26, r26
 4d0:	bb 1f       	adc	r27, r27
 4d2:	a6 17       	cp	r26, r22
 4d4:	b7 07       	cpc	r27, r23
 4d6:	10 f0       	brcs	.+4      	; 0x4dc <__udivmodhi4_ep>
 4d8:	a6 1b       	sub	r26, r22
 4da:	b7 0b       	sbc	r27, r23

000004dc <__udivmodhi4_ep>:
 4dc:	88 1f       	adc	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	5a 95       	dec	r21
 4e2:	a9 f7       	brne	.-22     	; 0x4ce <__udivmodhi4_loop>
 4e4:	80 95       	com	r24
 4e6:	90 95       	com	r25
 4e8:	bc 01       	movw	r22, r24
 4ea:	cd 01       	movw	r24, r26
 4ec:	08 95       	ret

000004ee <__itoa_ncheck>:
 4ee:	bb 27       	eor	r27, r27
 4f0:	4a 30       	cpi	r20, 0x0A	; 10
 4f2:	31 f4       	brne	.+12     	; 0x500 <__itoa_ncheck+0x12>
 4f4:	99 23       	and	r25, r25
 4f6:	22 f4       	brpl	.+8      	; 0x500 <__itoa_ncheck+0x12>
 4f8:	bd e2       	ldi	r27, 0x2D	; 45
 4fa:	90 95       	com	r25
 4fc:	81 95       	neg	r24
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	01 c0       	rjmp	.+2      	; 0x504 <__utoa_common>

00000502 <__utoa_ncheck>:
 502:	bb 27       	eor	r27, r27

00000504 <__utoa_common>:
 504:	fb 01       	movw	r30, r22
 506:	55 27       	eor	r21, r21
 508:	aa 27       	eor	r26, r26
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	aa 1f       	adc	r26, r26
 510:	a4 17       	cp	r26, r20
 512:	10 f0       	brcs	.+4      	; 0x518 <__utoa_common+0x14>
 514:	a4 1b       	sub	r26, r20
 516:	83 95       	inc	r24
 518:	50 51       	subi	r21, 0x10	; 16
 51a:	b9 f7       	brne	.-18     	; 0x50a <__utoa_common+0x6>
 51c:	a0 5d       	subi	r26, 0xD0	; 208
 51e:	aa 33       	cpi	r26, 0x3A	; 58
 520:	08 f0       	brcs	.+2      	; 0x524 <__utoa_common+0x20>
 522:	a9 5d       	subi	r26, 0xD9	; 217
 524:	a1 93       	st	Z+, r26
 526:	00 97       	sbiw	r24, 0x00	; 0
 528:	79 f7       	brne	.-34     	; 0x508 <__utoa_common+0x4>
 52a:	b1 11       	cpse	r27, r1
 52c:	b1 93       	st	Z+, r27
 52e:	11 92       	st	Z+, r1
 530:	cb 01       	movw	r24, r22
 532:	00 c0       	rjmp	.+0      	; 0x534 <strrev>

00000534 <strrev>:
 534:	dc 01       	movw	r26, r24
 536:	fc 01       	movw	r30, r24
 538:	67 2f       	mov	r22, r23
 53a:	71 91       	ld	r23, Z+
 53c:	77 23       	and	r23, r23
 53e:	e1 f7       	brne	.-8      	; 0x538 <strrev+0x4>
 540:	32 97       	sbiw	r30, 0x02	; 2
 542:	04 c0       	rjmp	.+8      	; 0x54c <strrev+0x18>
 544:	7c 91       	ld	r23, X
 546:	6d 93       	st	X+, r22
 548:	70 83       	st	Z, r23
 54a:	62 91       	ld	r22, -Z
 54c:	ae 17       	cp	r26, r30
 54e:	bf 07       	cpc	r27, r31
 550:	c8 f3       	brcs	.-14     	; 0x544 <strrev+0x10>
 552:	08 95       	ret

00000554 <_exit>:
 554:	f8 94       	cli

00000556 <__stop_program>:
 556:	ff cf       	rjmp	.-2      	; 0x556 <__stop_program>
